/*****************     Comparing Promises to Callbacks  ************\

Both promises and callbacks are used to handle asynchronous operations in JavaScript, such as API calls, file handling, and database queries. Here’s a comparison of how they work and why promises are often preferred:



Promises provide a more powerful and elegant approach to asynchronous programming for several key reasons:

Avoiding “Callback Hell” (Nested Callbacks):

Callbacks often lead to deeply nested code, commonly known as "callback hell," where each callback is nested within another. This makes code harder to read, debug, and maintain.
Promises help avoid this by allowing methods like .then() to chain operations, leading to a cleaner and more readable code structure.
Example:


// Callback Hell
asyncTask1((result1) => {
    asyncTask2(result1, (result2) => {
        asyncTask3(result2, (result3) => {
            console.log(result3);
        });
    });
});

// Promise Chaining
asyncTask1()
    .then(result1 => asyncTask2(result1))
    .then(result2 => asyncTask3(result2))
    .then(result3 => console.log(result3))
    .catch(error => console.error(error));
Better Error Handling:

With callbacks, error handling has to be managed within each callback, which can lead to inconsistent error handling across different parts of code.
Promises provide centralized error handling with the .catch() method, making it easier to handle errors in one place rather than individually for each callback.

// With Callbacks
asyncTask((error, result) => {
    if (error) {
        console.error(error);
    } else {
        asyncTask2((error, result) => {
            if (error) {
                console.error(error);
            } else {
                // Continue...
            }
        });
    }
});

// With Promises
asyncTask()
    .then(result => asyncTask2(result))
    .catch(error => console.error(error));
Chaining and Composing Asynchronous Tasks:

Promises allow easy chaining of asynchronous tasks. Each .then() call returns a new promise, enabling chaining. This is especially useful when multiple asynchronous tasks depend on the results of previous ones.
Additionally, Promise.all() and Promise.race() methods allow tasks to run in parallel or resolve as soon as one of them completes, giving developers more flexibility.

// Run tasks in parallel and wait for all to complete
Promise.all([task1(), task2(), task3()])
    .then(results => console.log(results))
    .catch(error => console.error(error));
Improved Code Readability and Maintainability:

Promises allow developers to write asynchronous code in a way that closely resembles synchronous code, making it easier to follow and understand.
This readability also improves maintainability, as the code structure remains flat and organized, even as complexity increases.
Support for Async/Await:

Promises are the foundation for async/await, a syntax that makes working with asynchronous code even more intuitive. async/await transforms promise-based code into a synchronous-looking structure, further enhancing readability.
async/await is particularly useful when there are multiple asynchronous calls, as it allows the use of try/catch blocks for error handling, simplifying error management.

// Using async/await for better readability
async function fetchData() {
    try {
        const result1 = await asyncTask1();
        const result2 = await asyncTask2(result1);
        console.log(result2);
    } catch (error) {
        console.error(error);
    }
}